#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    behaviors {
    };

    combos {
        compatible = "zmk,combos";

        delete {
            bindings = <&kp DELETE>;
            key-positions = <17 31>;
        };

        quickwindows {
            bindings = <&kp LG(LS(W))>;
            key-positions = <2 3 4>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&kp ESC           &kp N1      &kp N2      &kp N3     &kp N4          &kp N5         &kp UP_ARROW     &kp N6     &kp N7         &kp N8         &kp N9         &kp N0             &kp BACKSPACE
&kp LEFT_CONTROL  &kp Q       &kp W       &kp E      &kp R           &kp T          &kp DOWN_ARROW   &kp Y      &kp U          &kp I          &kp O          &kp P              &kp LEFT_BRACKET
&kp LEFT_WIN      &kp A       &kp S       &kp D      &kp F           &kp G          &kp LEFT_ARROW   &kp H      &kp J          &kp K          &kp L          &kp SEMI           &kp APOS
&kp LEFT_ALT      &kp Z       &kp X       &kp C      &kp V           &kp B          &kp RIGHT_ARROW  &kp N      &kp M          &kp COMMA      &kp DOT        &kp SLASH          &kp MINUS
&kp C_MUTE        &kp DELETE  &kp ESCAPE  &lt 1 TAB  &kp LEFT_SHIFT  &lt 2 ENTER    &kp ENTER        &kp SPACE  &kp BACKSPACE  &kp LG(SPACE)  &kp BACKSLASH  &kp RIGHT_CONTROL
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "LAYER0";
        };

        layer_1 {
            display-name = "LAYER0";
            bindings = <
&kp ESC           &kp N1      &kp N2      &kp N3   &kp N4          &kp N5           &kp UP_ARROW    &kp N6      &kp N7         &kp N8         &kp N9         &kp N0             &kp BACKSPACE
&kp LEFT_CONTROL  &kp F1      &kp F2      &kp F3   &kp F4          &kp CAPS         &kp DOWN_ARROW  &kp LS(N1)  &kp LS(N2)     &kp LS(N3)     &kp LS(N4)     &kp LS(N5)         &kp RCTRL
&kp LG(C)         &kp F5      &kp F6      &kp F7   &kp F8          &kp LC(LS(E))    &kp LEFT_ARROW  &kp LS(N6)  &kp LS(N7)     &kp LS(N8)     &kp LS(N9)     &kp LS(N0)         &kp RGUI
&kp LEFT_ALT      &kp F9      &kp F10     &kp F11  &kp F12         &kp LG(SPACE)    &kp RIGHT       &kp N8      &kp M          &kp COMMA      &kp DOT        &kp SLASH          &kp LALT
&kp C_MUTE        &kp DELETE  &kp ESCAPE  &sl 1    &kp LEFT_SHIFT  &lt 3 ENTER      &kp ENTER       &kp SPACE   &kp BACKSPACE  &kp LG(SPACE)  &kp BACKSLASH  &kp RIGHT_CONTROL
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
        };

        layer_2 {
            display-name = "LAYER0";
            bindings = <
&kp ESC           &kp N1      &kp N2      &kp N3  &kp N4          &kp N5         &kp UP_ARROW    &kp N6      &kp N7         &kp N8          &kp N9         &kp N0             &kp BACKSPACE
&kp LEFT_CONTROL  &kp F1      &kp N7      &kp N8  &kp N9          &kp EQUAL      &kp DOWN_ARROW  &kp HOME    &kp LA(LEFT)   &kp UP_ARROW    &kp LA(RIGHT)  &kp PAGE_UP        &kp RCTRL
&kp LG(C)         &kp FSLH    &kp N4      &kp N5  &kp N6          &kp MINUS      &kp LEFT_ARROW  &kp LS(N6)  &kp LEFT       &kp DOWN_ARROW  &kp RIGHT      &kp LS(N0)         &kp RGUI
&kp LEFT_ALT      &kp N0      &kp N1      &kp N2  &kp N3          &kp DOT        &kp RIGHT       &kp END     &kp M          &kp COMMA       &kp DOT        &kp PAGE_DOWN      &kp LALT
&kp C_MUTE        &kp DELETE  &kp ESCAPE  &sl 1   &kp LEFT_SHIFT  &lt 2 ENTER    &kp ENTER       &kp SPACE   &kp BACKSPACE  &kp LG(SPACE)   &kp BACKSLASH  &kp RIGHT_CONTROL
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
        };

        layer_3 {
            bindings = <
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &trans        &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &trans        &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &trans        &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &trans        &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
